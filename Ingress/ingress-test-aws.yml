apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx1-deployment
  labels:
    app: nginx1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx1
  template:
    metadata:
      labels:
        app: nginx1
    spec:
      containers:
      - name: nginx1
        image: rajithr007/nginx1-test:v1
#        imagePullPolicy: Never
        ports:
        - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx2-deployment
  labels:
    app: nginx2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx2
  template:
    metadata:
      labels:
        app: nginx2
    spec:
      containers:
      - name: nginx2
        image: rajithr007/nginx2-test:v1
#        imagePullPolicy: Never
        ports:
        - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx3-deployment
  labels:
    app: nginx3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx3
  template:
    metadata:
      labels:
        app: nginx3
    spec:
      containers:
      - name: nginx3
        image: rajithr007/nginx3-test:v1
#        imagePullPolicy: Never
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx1-service
spec:
  type: NodePort
  selector:
    app: nginx1
  ports:
  - name: http
    protocol: TCP
    port: 8080
    targetPort: 80
---    
apiVersion: v1
kind: Service
metadata:
  name: nginx2-service
spec:
  type: NodePort
  selector:
    app: nginx2
  ports:
  - name: http
    protocol: TCP
    port: 8081
    targetPort: 80
---    
apiVersion: v1
kind: Service
metadata:
  name: nginx3-service
spec:
  type: NodePort
  selector:
    app: nginx3
  ports:
  - name: http
    protocol: TCP
    port: 8082
    targetPort: 80
---    
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: abccorp-ingress
  labels:
    app: kubeapp-ecr
  annotations:
    # Ingress Core Settings  
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: internet-facing
    # Health Check Settings
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP 
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'    
    ## SSL Settings
    #alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}, {"HTTP":80}]'
    #alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:180789647333:certificate/9f042b5d-86fd-4fad-96d0-c81c5abc71e1
    # SSL Redirect Setting
    #alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'   
    # External DNS - For creating a Record Set in Route53
    # external-dns.alpha.kubernetes.io/hostname: kube.abccorp.com  
spec:
  # ingressClassName: nginx
  rules:
  - host: kube.abccorp.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx1-service
            port:
              number: 8080      
      - path: /svc1
        pathType: Prefix
        backend:
          service:
            name: nginx1-service
            port:
              number: 8080
      - path: /svc2
        pathType: Prefix
        backend:
          service:
            name: nginx2-service
            port:
              number: 8081
      - path: /svc3
        pathType: Prefix
        backend:
          service:
            name: nginx3-service
            port:
              number: 8082              