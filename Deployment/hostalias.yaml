apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: maintenance
    app.kubernetes.io/version: 1.0.0-SNAPSHOT
  name: maintenance
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: maintenance
      app.kubernetes.io/version: 1.0.0-SNAPSHOT
  template:
    metadata:
      labels:
        app.kubernetes.io/name: maintenance
        app.kubernetes.io/version: 1.0.0-SNAPSHOT
    spec:
      containers:
        - env:
            - name: QUARKUS_MONGODB_CONNECTION_STRING
              value: "mongodb://mongoadmin:secret@host.docker.internal:27017"
            - name: MP_MESSAGING_OUTGOING_EVENT_BOOTSTRAP_SERVERS
              value: "host.docker.internal:9092"
            - name: QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS
              value: "host.docker.internal:9092"
            - name: QUARKUS_HTTP_CORS
              value: "true"
            - name: QUARKUS_HTTP_CORS_ORIGINS
              value: "https://localhost:4200"
            - name: QUARKUS_HTTP_CORS_HEADERS
              value: "accept, authorization, content-type, x-requested-with"
            - name: QUARKUS_HTTP_CORS_METHODS
              value: "GET, PUT, POST, DELETE"
          image: 901522175683.dkr.ecr.ap-south-1.amazonaws.com/maintenance:2.0
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "150Mi"
              cpu: "150m"
            limits:
              memory: "200Mi"
              cpu: "250m"           
          name: maintenance                        
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
# this create an entry to be added in /etc/hosts file. this helps to fix issue when java trys to resolve hostname of the local system
      hostAliases:
      - hostnames:
        - "mf-linux"
        ip: "192.168.1.13"
